// Copyright 2025 David Fritz. All rights reserved.
// This software may be modified and distributed under the terms of the BSD
// 2-clause license. See the LICENSE file for details.

package number

import (
	"math"
	"strconv"
)

// Return the natural log of x.
func (x *Real) Ln() *Real {
	x2 := x.Copy()
	x2.SetPrecision(internalPrecisionBuffer + x.precision)
	z := x2.ln()
	z.SetPrecision(x.precision)
	return z
}

func (x *Real) ln() *Real {
	if x.negative {
		z := initFrom(x)
		z.form = FormNaN
		return z
	} else if x.IsInf() {
		z := initFrom(x)
		z.form = FormInf
		return z
	} else if x.IsNaN() {
		z := initFrom(x)
		z.form = FormNaN
		return z
	} else if x.Compare(NewUint64(1)) == 0 {
		z := initFrom(x)
		return z
	} else if x.IsZero() {
		z := initFrom(x)
		z.form = FormInf
		z.negative = true
		return z
	}

	// z1 = z0 * 2*((x-exp(z0))/(x+exp(z0)))

	xscaled := x.Copy()
	xscaled.exponent = 0

	s := xscaled.String()
	f, err := strconv.ParseFloat(s, 64)
	if err != nil {
		panic("could not parse float")
	}
	f = math.Log(f)

	z0 := initFrom(x)
	z0.SetFloat64(f)

	z := z0
	two := initFrom(x)
	two.SetInt64(2)

	for i := 0; i < estimateConvergence(float64MinimumDecimalPrecision, x.precision); i++ {
		ez := z.exp()
		n := xscaled.Sub(ez)
		d := xscaled.Add(ez)
		q := n.div(d)
		q2 := two.mul(q)
		znext := z.Add(q2)
		z = znext
	}

	// exponent part
	if x.exponent != 0 {
		ln10 := initFrom(x)
		ln10.significand = make([]byte, len(ln10digits))
		copy(ln10.significand, ln10digits)
		ln10.round()
		e := initFrom(x)
		e.SetInt64(int64(x.exponent))
		eln10 := e.mul(ln10)
		z = z.Add(eln10)
	}
	return z
}

// ln(10) to 999 digits
var ln10digits = []byte{2, 3, 0, 2, 5, 8, 5, 0, 9, 2, 9, 9, 4, 0, 4, 5, 6, 8,
	4, 0, 1, 7, 9, 9, 1, 4, 5, 4, 6, 8, 4, 3, 6, 4, 2, 0, 7, 6, 0, 1, 1, 0, 1, 4,
	8, 8, 6, 2, 8, 7, 7, 2, 9, 7, 6, 0, 3, 3, 3, 2, 7, 9, 0, 0, 9, 6, 7, 5, 7, 2,
	6, 0, 9, 6, 7, 7, 3, 5, 2, 4, 8, 0, 2, 3, 5, 9, 9, 7, 2, 0, 5, 0, 8, 9, 5, 9,
	8, 2, 9, 8, 3, 4, 1, 9, 6, 7, 7, 8, 4, 0, 4, 2, 2, 8, 6, 2, 4, 8, 6, 3, 3, 4,
	0, 9, 5, 2, 5, 4, 6, 5, 0, 8, 2, 8, 0, 6, 7, 5, 6, 6, 6, 6, 2, 8, 7, 3, 6, 9,
	0, 9, 8, 7, 8, 1, 6, 8, 9, 4, 8, 2, 9, 0, 7, 2, 0, 8, 3, 2, 5, 5, 5, 4, 6, 8,
	0, 8, 4, 3, 7, 9, 9, 8, 9, 4, 8, 2, 6, 2, 3, 3, 1, 9, 8, 5, 2, 8, 3, 9, 3, 5,
	0, 5, 3, 0, 8, 9, 6, 5, 3, 7, 7, 7, 3, 2, 6, 2, 8, 8, 4, 6, 1, 6, 3, 3, 6, 6,
	2, 2, 2, 2, 8, 7, 6, 9, 8, 2, 1, 9, 8, 8, 6, 7, 4, 6, 5, 4, 3, 6, 6, 7, 4, 7,
	4, 4, 0, 4, 2, 4, 3, 2, 7, 4, 3, 6, 5, 1, 5, 5, 0, 4, 8, 9, 3, 4, 3, 1, 4, 9,
	3, 9, 3, 9, 1, 4, 7, 9, 6, 1, 9, 4, 0, 4, 4, 0, 0, 2, 2, 2, 1, 0, 5, 1, 0, 1,
	7, 1, 4, 1, 7, 4, 8, 0, 0, 3, 6, 8, 8, 0, 8, 4, 0, 1, 2, 6, 4, 7, 0, 8, 0, 6,
	8, 5, 5, 6, 7, 7, 4, 3, 2, 1, 6, 2, 2, 8, 3, 5, 5, 2, 2, 0, 1, 1, 4, 8, 0, 4,
	6, 6, 3, 7, 1, 5, 6, 5, 9, 1, 2, 1, 3, 7, 3, 4, 5, 0, 7, 4, 7, 8, 5, 6, 9, 4,
	7, 6, 8, 3, 4, 6, 3, 6, 1, 6, 7, 9, 2, 1, 0, 1, 8, 0, 6, 4, 4, 5, 0, 7, 0, 6,
	4, 8, 0, 0, 0, 2, 7, 7, 5, 0, 2, 6, 8, 4, 9, 1, 6, 7, 4, 6, 5, 5, 0, 5, 8, 6,
	8, 5, 6, 9, 3, 5, 6, 7, 3, 4, 2, 0, 6, 7, 0, 5, 8, 1, 1, 3, 6, 4, 2, 9, 2, 2,
	4, 5, 5, 4, 4, 0, 5, 7, 5, 8, 9, 2, 5, 7, 2, 4, 2, 0, 8, 2, 4, 1, 3, 1, 4, 6,
	9, 5, 6, 8, 9, 0, 1, 6, 7, 5, 8, 9, 4, 0, 2, 5, 6, 7, 7, 6, 3, 1, 1, 3, 5, 6,
	9, 1, 9, 2, 9, 2, 0, 3, 3, 3, 7, 6, 5, 8, 7, 1, 4, 1, 6, 6, 0, 2, 3, 0, 1, 0,
	5, 7, 0, 3, 0, 8, 9, 6, 3, 4, 5, 7, 2, 0, 7, 5, 4, 4, 0, 3, 7, 0, 8, 4, 7, 4,
	6, 9, 9, 4, 0, 1, 6, 8, 2, 6, 9, 2, 8, 2, 8, 0, 8, 4, 8, 1, 1, 8, 4, 2, 8, 9,
	3, 1, 4, 8, 4, 8, 5, 2, 4, 9, 4, 8, 6, 4, 4, 8, 7, 1, 9, 2, 7, 8, 0, 9, 6, 7,
	6, 2, 7, 1, 2, 7, 5, 7, 7, 5, 3, 9, 7, 0, 2, 7, 6, 6, 8, 6, 0, 5, 9, 5, 2, 4,
	9, 6, 7, 1, 6, 6, 7, 4, 1, 8, 3, 4, 8, 5, 7, 0, 4, 4, 2, 2, 5, 0, 7, 1, 9, 7,
	9, 6, 5, 0, 0, 4, 7, 1, 4, 9, 5, 1, 0, 5, 0, 4, 9, 2, 2, 1, 4, 7, 7, 6, 5, 6,
	7, 6, 3, 6, 9, 3, 8, 6, 6, 2, 9, 7, 6, 9, 7, 9, 5, 2, 2, 1, 1, 0, 7, 1, 8, 2,
	6, 4, 5, 4, 9, 7, 3, 4, 7, 7, 2, 6, 6, 2, 4, 2, 5, 7, 0, 9, 4, 2, 9, 3, 2, 2,
	5, 8, 2, 7, 9, 8, 5, 0, 2, 5, 8, 5, 5, 0, 9, 7, 8, 5, 2, 6, 5, 3, 8, 3, 2, 0,
	7, 6, 0, 6, 7, 2, 6, 3, 1, 7, 1, 6, 4, 3, 0, 9, 5, 0, 5, 9, 9, 5, 0, 8, 7, 8,
	0, 7, 5, 2, 3, 7, 1, 0, 3, 3, 3, 1, 0, 1, 1, 9, 7, 8, 5, 7, 5, 4, 7, 3, 3, 1,
	5, 4, 1, 4, 2, 1, 8, 0, 8, 4, 2, 7, 5, 4, 3, 8, 6, 3, 5, 9, 1, 7, 7, 8, 1, 1,
	7, 0, 5, 4, 3, 0, 9, 8, 2, 7, 4, 8, 2, 3, 8, 5, 0, 4, 5, 6, 4, 8, 0, 1, 9, 0,
	9, 5, 6, 1, 0, 2, 9, 9, 2, 9, 1, 8, 2, 4, 3, 1, 8, 2, 3, 7, 5, 2, 5, 3, 5, 7,
	7, 0, 9, 7, 5, 0, 5, 3, 9, 5, 6, 5, 1, 8, 7, 6, 9, 7, 5, 1, 0, 3, 7, 4, 9, 7,
	0, 8, 8, 8, 6, 9, 2, 1, 8, 0, 2, 0, 5, 1, 8, 9, 3, 3, 9, 5, 0, 7, 2, 3, 8, 5,
	3, 9, 2, 0, 5, 1, 4, 4, 6, 3, 4, 1, 9, 7, 2, 6, 5, 2, 8, 7, 2, 8, 6, 9, 6, 5,
	1, 1, 0, 8, 6, 2, 5, 7, 1, 4, 9, 2, 1, 9, 8, 8, 4, 9, 9}
